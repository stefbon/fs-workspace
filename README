INTRODUCTION
============

This fuse service provides automatic access to network services like sftp.
For sftp hosts providing the ssh/sftp service are detected (using avahi) and
fs-workspace tries to establish a connection using the keys available for the user.
(found in ~/.ssh).

The mountpoint for network services looks like:

/run/fs-workspace/user/$USER/network

and when ssh/sftp services are found, path's like

/run/fs-workspace/user/$USER/network/SFTP_Network/example.org/server/home

are created to offer access to the user's home directory on server when
the server server.example.org is detected on the network as a host providing ssh/sftp.

SSH supports publickey and hostbased userauth, rsa and dss key formats,
key exchange methods diffie-hellman-group1-sha1 and diffie-hellman-group14-sha1,
ciphers chacha20-poly1305@openssh.com, aes128-cbc and aes128-ctr, aes256-cbc and aes256-ctr,
hmac hmac-sha1, hmac-sha256 and hmac-md5.

SFTP supports versions 3-6.


REQUIREMENTS
============

For crypto libgcrypt is used.
For userlogins systemd is used.
For detection of hosts and networkservices avahi is used.
Note libfuse is not required, fuse support in the kernel of course.


FEATURES
========

- Automatic detection of services on the local network

- Flexible handling of different signals/situations.
    After sending data to the ssh/sftp server the thread will wait for a certain period to get a response.
    This response is read and converted to a fuse format and will result in completion of the fuse request.
    It's possible that the thread has to wait too long. A timeout is used to handle this situation.
    Also it's possible that the remote process (with ssh/sftp it's the channel/subprocess) closes.
    Also it's possible that the original fuse request is cancelled. Also this signal is taken care of.


BUILD
=====

Create directory to get the sources.

git clone git@github.com:stefbon/fs-workspace.git

git clone git@github.com:stefbon/common-utils.git

cd fs-workspace

Create a symbolic link to the shared utilities:

ln -sf ../common-utils common-utils

Run the autogen.sh script to create the different buildfiles:

./autogen.sh

Run the configure script, and make:

./configure
make

This will build the fs-workspace executable.

As root:

mkdir -p /etc/fs-workspace/base
cp base/network.workspace /etc/fs-workspace/base

Adjust this file to you needs. The group users I want services to start for do belong to the group "users".
Rename that to your situation.

Copy the desktopfiles in config to /etc/fs-workspace:

cp desktopentry.* /etc/fs-workspace
This is not required, but gives nice icons for the domain and the server.
I'm using the network-workgroup and network-server icons from Adwaita icons collection.

Start the executable

./fs-workspace



Other filesystems
=================

Other filesystems than sftp are possible, for example SMB, using libsmb2 (SMB2/SMB3). This library has a nice api
and are also path based.


TODO
====

- support for ed25519 (in public/private keys and key exchange curve 25519)
at this moment rsa and dss are supported, and none elyptic curve based keys.

- support for backup. Add a "share" per server special for backups. The sftp protocol gives room to add extra calls, for example to
make a backup. Using librsync would be a good idea here.

- support for a UDP channel (like MOSH) for fast data transfer

- support for forwarding of ports like CUPS socket to secure access the remote printer server

- support of a chat terminal per server, allowing users per domain to chat

- support for more key providers than OPENSSH (=local files, like ~/.ssh/id_rsa), like a secretkey, or a key deamon


